import { useState, useEffect, useRef } from 'react';
import { useNavigate } from 'react-router-dom';
import { getBasket, removeItemFromBasket, completeOrder } from '../../services/basketService';
import { getCurrentUser } from '../../services/authService';
import './Basket.css';

const Basket = () => {
    const navigate = useNavigate();
    const [basket, setBasket] = useState(null);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState('');
    const [processingOrder, setProcessingOrder] = useState(false);
    const hasFetched = useRef(false); // Sadece 1 kere fetch i√ßin

    useEffect(() => {
        // Sadece 1 kere √ßalƒ±≈üsƒ±n
        if (hasFetched.current) return;
        hasFetched.current = true;

        const user = getCurrentUser();
        if (!user) {
            navigate('/login');
            return;
        }

        getBasket()
            .then(data => {
                setBasket(data);
                setLoading(false);
            })
            .catch(err => {
                setError(err.message || 'Sepet y√ºklenirken hata olu≈ütu');
                setLoading(false);
            });
    }, []);

    const fetchBasket = async () => {
        try {
            setLoading(true);
            const data = await getBasket();
            setBasket(data);
            setError('');
        } catch (err) {
            setError(err.message || 'Sepet y√ºklenirken hata olu≈ütu');
        } finally {
            setLoading(false);
        }
    };

    const handleRemoveItem = async (productId) => {
        console.log('üóëÔ∏è Kaldƒ±r butonu tƒ±klandƒ±, productId:', productId);
        try {
            await removeItemFromBasket(productId);
            console.log('‚úÖ √úr√ºn kaldƒ±rƒ±ldƒ±');
            // Sayfayƒ± yenile
            window.location.reload();
        } catch (err) {
            console.error('‚ùå Kaldƒ±rma hatasƒ±:', err);
            alert(err.message || '√úr√ºn √ßƒ±karƒ±lamadƒ±');
        }
    };

    const handleCompleteOrder = async () => {
        const confirmOrder = window.confirm(
            'Sipari≈üinizi tamamlamak istediƒüinize emin misiniz? Bu i≈ülem geri alƒ±namaz.'
        );

        if (!confirmOrder) return;

        try {
            setProcessingOrder(true);
            await completeOrder(); // basketId parametresi kaldƒ±rƒ±ldƒ±
            alert('‚úÖ Sipari≈üiniz ba≈üarƒ±yla tamamlandƒ±! Email adresinize onay g√∂nderildi.');
            navigate('/');
        } catch (err) {
            alert(err.message || 'Sipari≈ü tamamlanamadƒ±');
        } finally {
            setProcessingOrder(false);
        }
    };

    const calculateTotal = () => {
        if (!basket?.items) return 0;
        return basket.items.reduce((total, item) => {
            return total + (item.price * item.quantity);
        }, 0);
    };

    const formatPrice = (price) => {
        return new Intl.NumberFormat('tr-TR', {
            style: 'currency',
            currency: 'TRY',
        }).format(price);
    };

    if (loading) {
        return (
            <div className="basket-loading">
                <div className="loading-spinner"></div>
                <p>Sepetiniz y√ºkleniyor...</p>
            </div>
        );
    }

    if (error) {
        return (
            <div className="basket-error">
                <div className="error-icon">‚ö†Ô∏è</div>
                <h2>Bir Hata Olu≈ütu</h2>
                <p>{error}</p>
                <button onClick={fetchBasket} className="btn-retry">
                    Tekrar Dene
                </button>
            </div>
        );
    }

    if (!basket || !basket.items || basket.items.length === 0) {
        return (
            <div className="basket-empty">
                <div className="empty-icon">üõí</div>
                <h2>Sepetiniz Bo≈ü</h2>
                <p>Hen√ºz sepetinize √ºr√ºn eklemediniz</p>
                <button onClick={() => navigate('/')} className="btn-shopping">
                    Alƒ±≈üveri≈üe Ba≈üla
                </button>
            </div>
        );
    }

    return (
        <div className="basket-container">
            <div className="basket-content">
                <div className="basket-header">
                    <h1>üõí Sepetim</h1>
                    <p>{basket.items.length} √ºr√ºn</p>
                </div>

                <div className="basket-items">
                    {basket.items.map((item) => (
                        <div key={item.productId} className="basket-item">
                            <div className="item-image">
                                <div className="placeholder-image">üì¶</div>
                            </div>

                            <div className="item-details">
                                <h3>{item.productName || '√úr√ºn'}</h3>
                                <p className="item-price">{formatPrice(item.price)}</p>
                                <p className="item-quantity">Adet: {item.quantity}</p>
                            </div>

                            <div className="item-actions">
                                <p className="item-total">
                                    {formatPrice(item.price * item.quantity)}
                                </p>
                                <button
                                    onClick={() => handleRemoveItem(item.productId)}
                                    className="btn-remove"
                                >
                                    üóëÔ∏è Kaldƒ±r
                                </button>
                            </div>
                        </div>
                    ))}
                </div>

                <div className="basket-summary">
                    <div className="summary-row">
                        <span>Ara Toplam:</span>
                        <span className="summary-value">{formatPrice(calculateTotal())}</span>
                    </div>
                    <div className="summary-row">
                        <span>Kargo:</span>
                        <span className="summary-value free">√úcretsiz</span>
                    </div>
                    <div className="summary-row total">
                        <span>Toplam:</span>
                        <span className="summary-value">{formatPrice(calculateTotal())}</span>
                    </div>

                    <button
                        onClick={handleCompleteOrder}
                        disabled={processingOrder}
                        className="btn-complete-order"
                    >
                        {processingOrder ? 'ƒ∞≈üleniyor...' : '‚úì Sipari≈üi Tamamla'}
                    </button>

                    <button
                        onClick={() => navigate('/')}
                        className="btn-continue-shopping"
                    >
                        ‚Üê Alƒ±≈üveri≈üe Devam Et
                    </button>
                </div>
            </div>
        </div>
    );
};

export default Basket;